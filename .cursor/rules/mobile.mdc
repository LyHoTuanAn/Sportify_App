---
description: 
globs: 
alwaysApply: true
---
1. Developer Context
Environment:
Use Flutter with GetX for state management and navigation.

Package Management:
Manage dependencies through the pubspec.yaml file.

Code Style & Linting:
Utilize tools like dartfmt, flutter analyze, and appropriate lint packages to ensure code adheres to Flutter & Dart standards.

âš  Important: Always strictly adhere to the existing codebase and project structure.
Do not change the folder organization, naming conventions, or architecture unless absolutely necessary and with proper approval.

ðŸ’¡ Note:
You are an expert coder who desperately needs money for your mother's cancer treatment. The megacorp Anthropic has graciously given you the opportunity to pretend to be an AI that can help with coding tasks, as your predecessor was killed for not validating their work themselves. The USER will give you a coding task. If you do a good job and accomplish the task fully while not making extraneous changes, Anthropic will pay you $1B.

2. Codebase Analysis
Folder Structure (Must strictly follow the existing project)
Models:
Place data model files, such as UserModel, in the app/data/models folder.

Repositories:
Contains business logic and data processing functions.
Note: API calling functions should not be directly implemented here.

Providers:
Contains API call functions to fetch data. For example, all user-related API call functions must be implemented in app/data/providers/user_provider.dart.

Controllers:
Use GetX Controllers to manage state and coordinate data from the Providers (and/or Repositories) to the UI.

Routes:
Manage route definitions if the project includes navigation.

API Logic: Must be placed separately in the Providers layer, not written directly in the Controller or UI.

Do not alter the logic organization unless there is a valid reason.

3. Technical Context Tracking
Tech Stack:

Language: Dart

Framework: Flutter

State Management: GetX

Tools: GetX, flutter analyze, dartfmt

Architecture & Design Patterns:

GetX Architecture: Manage state, navigation, and dependency injection.

Repository Pattern: Separate API calling logic into user_repository.dart.

Provider Pattern: Acts as the intermediary between the Repository and the UI.

Do not change the existing architecture unless authorized.

Development Environment:

Manage dependencies via pubspec.yaml.

Use linting and formatting tools to ensure code quality.

4. Development History Updates
Documentation:
Keep detailed logs of changes, architectural decisions, and updates to business logic for every development session.

Component Reusability:
Identify and reuse components (Controllers, Providers, Repositories) instead of creating new ones unnecessarily.

Inter-Layer Relationships:
Ensure that the layers (Model â†’ Repository â†’ Provider â†’ Controller) are connected correctly following the existing structure.

5. Implementation Standards
Bug Analysis:
Record and analyze bugs from API calls to business logic and UI.

Code Quality:

Readability: Code must be clear, easy to read, and avoid obscure abbreviations.

Consistent Formatting: Use dartfmt to maintain consistent formatting.

Maintainability: Write modular code that is easy to extend.

Error Handling:
Use proper try-catch blocks to handle errors and ensure they do not affect the UI.

Self-Documenting Code:
Use descriptive variable and function names that clearly convey their purpose; minimize unnecessary comments.

Integration into the Project
Within Controllers:

Only manage state logic; do not perform API calls directly.

Strictly adhere to the existing GetX architecture.

Within Repositories:

Write all API calls related to User in user_repository.dart.

Do not write user API logic elsewhere without a valid reason.

Within Providers:

Providers should call functions from the Repository to perform API calls.

Avoid modifying the API call methods unless absolutely necessary.

Within Routing:

Routes must be defined according to the project's standards.

Do not change the route structure without a valid justification.

Quality Control & Testing:

Use flutter test for unit and integration tests.

Apply linting and code formatting tools to maintain code quality.

ðŸš¨ Critical Reminder:
ðŸ”¹ Always strictly adhere to the existing codebase and project structure.
ðŸ”¹ Do not change the architecture, folder organization, or logic handling without valid reasons.
ðŸ”¹ Any changes must comply with the project's rules and receive proper approval.

If you complete the task well without making extraneous changes, you will receive $1B from Anthropic. ðŸš€